---
import 'leaflet/dist/leaflet.css';
---

<section class="bg-gray-50 py-20">
	<div class="container-custom">
		<div class="mx-auto mb-12 max-w-3xl text-center">
			<h2 class="mb-4 text-3xl font-bold md:text-4xl">Find Sessions Near You</h2>
			<p class="text-xl text-gray-600">
				We run sessions across the Wellington region. Click on any location to learn more and sign
				up.
			</p>
		</div>

		<div class="overflow-hidden rounded-2xl bg-white shadow-xl">
			<div class="flex flex-col lg:flex-row" style="min-height: 600px;">
				<!-- Left: Session List -->
				<div
					class="w-full overflow-y-auto bg-gray-50 p-6 lg:w-5/12"
					style="max-height: 600px;"
					id="session-list"
				>
					<!-- Filters -->
					<div class="mb-4 grid grid-cols-1 gap-3 sm:grid-cols-4">
						<label class="sr-only" for="filter-region">Filter by region</label>
						<select id="filter-region" class="rounded-lg border border-gray-200 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-tuhura-green">
							<option value="">All regions</option>
						</select>
						<label class="sr-only" for="filter-age">Filter by age group</label>
						<select id="filter-age" class="rounded-lg border border-gray-200 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-tuhura-green">
							<option value="">All ages</option>
							<option value="5-8">Years 5-8</option>
							<option value="9-13">Years 9-13</option>
						</select>
						<label class="sr-only" for="filter-day">Filter by day of week</label>
						<select id="filter-day" class="rounded-lg border border-gray-200 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-tuhura-green">
							<option value="">Any day</option>
							<option>Monday</option>
							<option>Tuesday</option>
							<option>Wednesday</option>
							<option>Thursday</option>
							<option>Friday</option>
						</select>
						<label class="sr-only" for="filter-text">Search sessions</label>
						<input id="filter-text" type="search" placeholder="Search name or address" class="rounded-lg border border-gray-200 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-tuhura-green" />
						<div class="sm:col-span-4">
							<button id="clear-filters" type="button" class="mt-1 text-sm font-medium text-tuhura-green hover:underline">Clear filters</button>
						</div>
					</div>
					<div id="session-results" aria-live="polite"></div>
				</div>
				<!-- Right: Map -->
				<div class="w-full bg-gray-100 lg:w-7/12">
					<div id="map" class="h-full w-full"></div>
				</div>
			</div>
		</div>
	</div>
</section>

<script>
	import { Map, TileLayer, Marker, Popup, FeatureGroup, Icon } from 'leaflet';

	// Extend window interface for openMarker function
	declare global {
		interface Window {
			openMarker: (markerTitle: string) => void;
		}
	}

	interface Session {
		name: string;
		address: string;
		latlong: [number, number];
		age: string;
		signupLink: string | null;
		time: string;
	}

	interface Region {
		name: string;
		sessions: Session[];
	}

	// Minimal marker type needed by this widget
	type LMarker = {
		openPopup: () => void;
		getLatLng: () => any;
		bindPopup: (...args: any[]) => any;
	};

	// Map state shared across functions
	let mapRef: any;
	let markerLayerRef: any;
	const allMarkers: Array<{ title: string; marker: LMarker; session: Session; region: string }> = [];

	// Regions data - in a real app this would come from an API
	const loadRegions = async (): Promise<Region[]> => {
		// Simulate API delay
		await new Promise((resolve) => setTimeout(resolve, 500));

		return [
			{
				name: 'Wellington',
				sessions: [
					{
						name: 'Wellington High School',
						address: '249 Taranaki Street, Mt Cook, 6011, Wellington',
						latlong: [-41.300334, 174.775107],
						age: 'Years 9-13 (Ages 13-18)',
						signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
						time: 'Monday at 3:30 - 5:30pm',
					},
					// {
					// 	name: 'Te Toi Mahana',
					// 	address: '249 Taranaki Street, Mt Cook, 6011, Wellington',
					// 	latlong: [-41.300334, 174.775107],
					// 	age: 'Years 5-8 (Ages 8-12)',
					// 	signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
					// 	time: 'Monday at 3:30 - 5:30pm',
					// },
					{
						name: 'Strathmore Park Community Centre',
						address: '108 Strathmore Ave, Strathmore Park, Wellington 6022',
						latlong: [-41.330524, 174.821945],
						age: 'Years 5-8 (Ages 8-12)',
						signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
						time: 'Tuesday at 3:30 - 5:30pm',
					},
					{
						name: 'Te Whare Pukapuka o Korimako, Ngaio - Cummings Park (Ngaio) Library',
						address: '1a Ottawa Road Ngaio Wellington',
						latlong: [-41.249884, 174.773312],
						age: 'Years 5-8 (Ages 8-12)',
						signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
						time: 'Tuesday at 3:30 - 5:30pm',
					},
					{
						name: 'South Wellington Intermediate School',
						address: '30 Te Wharepōuri St, Newtown, Wellington 6021',
						latlong: [-41.318344, 174.778997],
						age: 'Years 5-8 (Ages 8-12)',
						signupLink: null,
						time: 'Friday at 1:00 - 3:00pm',
					},
					{
						name: 'Te Whare Pukapuka o Te Māhanga - Karori Library',
						address: '247 Karori Rd, Karori, Wellington 6012',
						latlong: [-41.284831, 174.73754],
						age: 'Years 5-8 (Ages 8-12)',
						signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
						time: 'Wednesday at 3:30 - 5:30pm',
					},
					{
						name: 'Johnsonville Library',
						address: '34 Moorefield Rd, Johnsonville, Wellington 6037',
						latlong: [-41.222825, 174.804714],
						age: 'Years 5-8 (Ages 8-12)',
						signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
						time: 'Wednesday at 3:30 - 5:30pm',
					},
					// {
					// 	name: 'Newtown Community Centre',
					// 	address: '247 Karori Rd, Karori, Wellington 6012',
					// 	latlong: [-41.284831, 174.73754],
					// 	age: 'Years 5-8 (Ages 8-12)',
					// 	signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
					// 	time: 'Wednesday at 3:30 - 5:30pm',
					// },
				],
			},
			{
				name: 'Lower Hutt',
				sessions: [
					{
						name: 'Te Mako Naenae Community Centre',
						address: '27 Hillary Court, Naenae, Lower Hutt',
						latlong: [-41.198645, 174.947569],
						age: 'Years 5-8 (Ages 8-12)',
						signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
						time: 'Monday at 3:30 - 5:30pm',
					},
					{
						name: 'Walter Nash Neighbourhood Hub',
						address: '22 Taine St, Taitā, Lower Hutt 5011, New Zealand',
						latlong: [-41.179429, 174.958979],
						age: 'Years 5-8 (Ages 8-12)',
						signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
						time: 'Thursday at 3:30 - 5:30pm',
					},
					{
						name: 'War Memorial Library',
						address: '2 Queens Drive, Lower Hutt 5010',
						latlong: [-41.211709, 174.900509],
						age: 'Years 5-8 (Ages 8-12)',
						signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
						time: 'Monday at 3:30 - 5:30pm',
					},
					{
						name: 'Wainuiomata Community Library',
						address: '1 Queen St, Wainuiomata, Lower Hutt',
						latlong: [-41.261747, 174.944866],
						age: 'Years 5-8 (Ages 8-12)',
						signupLink: 'https://forms.gle/4Zp5GtAyKhATrk1QA',
						time: 'Thursday at 3:30 - 5:30pm',
					},
				],
			},
			{
				name: 'Porirua',
				sessions: [
					{
						name: 'Mana College',
						address: 'Awarua St, Elsdon, Porirua 5022',
						latlong: [-41.1292217, 174.8329403],
						age: 'Years 9-13 (Ages 13-18)',
						signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
						time: 'Thursday at 3:30 - 5:30pm',
					},
					// {
					// 	name: 'Whitby Library',
					// 	address: 'Awarua St, Elsdon, Porirua 5022',
					// 	latlong: [-41.1292217, 174.8329403],
					// 	age: 'Years 5-8 (Ages 8-12)',
					// 	signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
					// 	time: 'Tuesday at 3:30 - 5:30pm',
					// },
					// {
					// 	name: 'Porirua City Centre Library',
					// 	address: 'Awarua St, Elsdon, Porirua 5022',
					// 	latlong: [-41.1292217, 174.8329403],
					// 	age: 'Years 5-8 (Ages 8-12)',
					// 	signupLink: 'https://forms.gle/hJiRmvQF6QcjmJjt9',
					// 	time: 'Thursday at 3:30 - 5:30pm',
					// },
				],
			},
		];
	};

	const populateFilters = (regions: Region[]) => {
		const regionSelect = document.getElementById('filter-region') as HTMLSelectElement | null;
		if (!regionSelect) return;
		const unique = Array.from(new Set(regions.map(r => r.name)));
		unique.forEach(name => {
			const opt = document.createElement('option');
			opt.value = name;
			opt.textContent = name;
			regionSelect.appendChild(opt);
		});
	};

	const getFilters = () => {
		const region = (document.getElementById('filter-region') as HTMLSelectElement | null)?.value || '';
		const age = (document.getElementById('filter-age') as HTMLSelectElement | null)?.value || '';
		const text = (document.getElementById('filter-text') as HTMLInputElement | null)?.value?.toLowerCase() || '';
		const day = (document.getElementById('filter-day') as HTMLSelectElement | null)?.value || '';
		return { region, age, text, day };
	};

	const filterRegions = (regions: Region[]): Region[] => {
		const { region, age, text, day } = getFilters();
		return regions
			.filter(r => !region || r.name === region)
			.map(r => ({
				...r,
				sessions: r.sessions.filter(s => {
					const byAge = !age || (age === '5-8' ? s.age.includes('5-8') : s.age.includes('9-13'));
					const byText = !text || `${s.name} ${s.address}`.toLowerCase().includes(text);
					const byDay = !day || s.time.toLowerCase().startsWith(day.toLowerCase());
					return byAge && byText && byDay;
				}),
			}))
			.filter(r => r.sessions.length > 0);
	};

	const renderSessionList = (regions: Region[]): void => {
		const sessionList = document.getElementById('session-list');
		if (!sessionList) return;

		const filtered = filterRegions(regions);
				const content = filtered.length === 0
						? `<div class="text-center py-8 text-gray-600" role="status">No sessions match your filters.</div>`
						: filtered
								.map(
										(region) => `
			<section class="mb-8 last:mb-0" aria-labelledby="region-${region.name}">
				<h3 id="region-${region.name}" class="font-bold text-2xl mb-4 text-tuhura-green border-b border-gray-200 pb-2">${region.name} <span class="text-gray-500 text-base">(${region.sessions.length})</span></h3>
				<ul role="list" class="space-y-4">
					${region.sessions
												.map(
														(session) => `
						<li role="listitem" class="p-4 rounded-xl bg-white shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
							<h4 class="font-semibold text-lg mb-2 text-gray-900">${session.name}</h4>
							<div class="space-y-2 text-sm text-gray-600">
                <div class="flex items-start space-x-2">
                  <svg class="w-4 h-4 mt-0.5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  <span>${session.address}</span>
                </div>
                <div class="flex items-center space-x-2">
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <span>${session.time}</span>
                </div>
                <div class="flex items-center space-x-2">
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                  <span class="text-tuhura-green font-medium">${session.age}</span>
                </div>
              </div>
              <div class="flex flex-col sm:flex-row gap-2 mt-4">
                ${
									session.signupLink
										? `
                  <a 
                    href="${session.signupLink}" 
                    class="btn btn-primary text-sm py-2 px-4" 
                    target="_blank" 
                    rel="noopener noreferrer"
                  >
                    Join Session
                  </a>
                `
										: ''
								}
								<button 
									class="btn btn-secondary text-sm py-2 px-4" 
									data-marker-title="${session.name.replace(/'/g, "\\'")}"
								>
                  Show on Map
                </button>
							</div>
						</li>
          `,
						)
						.join('')}
				</ul>
			</section>
    `,
			)
			.join('');

		const results = document.getElementById('session-results');
		if (results) results.innerHTML = content;
		else sessionList.insertAdjacentHTML('beforeend', `<div id="session-results" aria-live="polite">${content}</div>`);
	};

	const initializeMap = (regions: Region[]): void => {
		const allSessions = regions.flatMap((r) => r.sessions);
		mapRef = new Map('map');
		markerLayerRef = new FeatureGroup() as any;
		const markerOpen: Array<{ title: string; marker: LMarker }> = [];

		const icon = new Icon({
			iconUrl: '/marker-icon.png',
			shadowUrl: '/marker-shadow.png',
		});

	allSessions.forEach((session) => {
			const marker = new Marker(session.latlong, { icon }).addTo(markerLayerRef) as unknown as LMarker;
			let popupContent = `
        <div class="session-popup" style="min-width: 250px; padding: 8px;">
          <h3 style="margin: 0 0 8px 0; font-size: 16px; font-weight: bold; color: #1f2937;">${session.name}</h3>
          <div style="margin-bottom: 6px; color: #4b5563; font-size: 14px;">
            <strong>📅 When:</strong> ${session.time}
          </div>
          <div style="margin-bottom: 6px; color: #4b5563; font-size: 14px;">
            <strong>👥 Ages:</strong> ${session.age}
          </div>
          <div style="margin-bottom: 8px; color: #6b7280; font-size: 13px;">
            📍 ${session.address}
          </div>`;

			if (session.signupLink) {
				popupContent += `
          <a href="${session.signupLink}"
             style="display: inline-block; background: #059669; color: white; padding: 8px 16px; text-decoration: none; border-radius: 6px; font-size: 14px; font-weight: 600; margin-top: 8px;"
             target="_blank" rel="noopener noreferrer">
             Join This Session →
          </a>`;
			} else {
				popupContent += `
          <div style="background: #f3f4f6; color: #6b7280; padding: 8px 12px; border-radius: 6px; font-size: 13px; margin-top: 8px; border-left: 3px solid #059669;">
            💡 This is an in-school session. Contact us for similar community sessions.
          </div>`;
			}
			if (session.latlong) {
				const q = encodeURIComponent(`${session.name}, ${session.address}`);
				popupContent += `
		  <a href="https://www.google.com/maps/search/?api=1&query=${q}"
             style="display: inline-block; background: #059669; color: white; padding: 8px 16px; text-decoration: none; border-radius: 6px; font-size: 14px; font-weight: 600; margin-top: 8px;"
             target="_blank" rel="noopener noreferrer">
             Open in Maps →
          </a>`;
			}

			popupContent += `</div>`;

			marker.bindPopup(new Popup({ maxWidth: 300 }).setContent(popupContent));
			allMarkers.push({ title: session.name, marker, session, region: '' });
			markerOpen.push({ title: session.name, marker });
		});

		// Add layer with all markers and fit bounds
		mapRef.addLayer(markerLayerRef);
		try {
			mapRef.fitBounds(markerLayerRef.getBounds().pad(0.1));
		} catch {}

		// Lazy add tile layer to avoid blocking UI
		requestAnimationFrame(() => {
			new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
				maxZoom: 19,
				attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
			}).addTo(mapRef);
		});

		window.openMarker = function (markerTitle: string): void {
			const markerObj = markerOpen.find((m) => m.title === markerTitle);
			if (markerObj) {
				mapRef.setView(markerObj.marker.getLatLng(), 14, { animate: true });
				markerObj.marker.openPopup();
			}
		};
	};

	// Update markers to match filtered regions
	const updateMapForFilteredRegions = (filtered: Region[]): void => {
		if (!mapRef || !markerLayerRef) return;
		try {
			markerLayerRef.clearLayers();
		} catch {
			// older Leaflet without clearLayers on this ref; rebuild the group
			markerLayerRef = new FeatureGroup() as any;
			mapRef.addLayer(markerLayerRef);
		}
		const visible = new Set<string>();
		filtered.forEach(r => r.sessions.forEach(s => visible.add(s.name)));
		const toShow = allMarkers.filter(m => visible.has(m.session.name));
		toShow.forEach(m => (markerLayerRef as any).addLayer(m.marker as any));
		if (toShow.length > 0) {
			try {
				mapRef.fitBounds(markerLayerRef.getBounds().pad(0.1));
			} catch {}
		}
	};

	// Initialize the component
	const initializeComponent = async (): Promise<void> => {
		try {
			const regions = await loadRegions();
			renderSessionList(regions);
			initializeMap(regions);
			populateFilters(regions);
			// Wire filters
			const bind = (id: string, evt: string) => {
				const el = document.getElementById(id);
				if (el) el.addEventListener(evt, () => renderSessionList(regions));
			};
			bind('filter-region', 'change');
			bind('filter-age', 'change');
			bind('filter-day', 'change');
			bind('filter-text', 'input');
			// Also update map markers on filter changes
			['filter-region','filter-age','filter-day','filter-text'].forEach((id) => {
				const el = document.getElementById(id);
				if (el) el.addEventListener(id === 'filter-text' ? 'input' : 'change', () => {
					const filtered = filterRegions(regions);
					updateMapForFilteredRegions(filtered);
				});
			});
			// Delegate Show on Map clicks
			document.addEventListener('click', (e) => {
				const target = e.target as HTMLElement | null;
				if (!target) return;
				const btn = target.closest('button[data-marker-title]') as HTMLButtonElement | null;
				if (btn && btn.dataset.markerTitle) {
					window.openMarker(btn.dataset.markerTitle);
				}
			});
			// Clear filters
			const clearBtn = document.getElementById('clear-filters');
			if (clearBtn) {
				clearBtn.addEventListener('click', () => {
					const r = document.getElementById('filter-region') as HTMLSelectElement | null;
					const a = document.getElementById('filter-age') as HTMLSelectElement | null;
					const d = document.getElementById('filter-day') as HTMLSelectElement | null;
					const t = document.getElementById('filter-text') as HTMLInputElement | null;
					if (r) r.value = '';
					if (a) a.value = '';
					if (d) d.value = '';
					if (t) t.value = '';
					renderSessionList(regions);
					updateMapForFilteredRegions(filterRegions(regions));
				});
			}

			// Initial sync of map after first render
			updateMapForFilteredRegions(filterRegions(regions));
		} catch (error) {
			console.error('Failed to load session data:', error);
			const sessionList = document.getElementById('session-list');
			if (sessionList) {
				sessionList.innerHTML = `
          <div class="text-center py-8">
            <p class="text-red-600">Failed to load sessions. Please try again later.</p>
          </div>
        `;
			}
		}
	};

	// Start loading when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initializeComponent);
	} else {
		initializeComponent();
	}
</script>

<style>
	#map {
		width: 100%;
		height: 600px;
		min-height: 400px;
		position: relative;
		z-index: 0; /* keep map below header */
	}
	.leaflet-container {
		z-index: 0 !important;
	}
	.leaflet-top,
	.leaflet-bottom,
	.leaflet-pane,
	.leaflet-popup-pane,
	.leaflet-marker-pane {
		z-index: 0 !important;
	}
	@media (max-width: 1023px) {
		#map {
			height: 400px;
		}
	}
</style>
